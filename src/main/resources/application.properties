## Maria DB SQL
# CREATE DATABASE springdev;
# USE springdev;
# CREATE USER 'springdev'@'%' IDENTIFIED BY '12345';
# GRANT ALL privileges ON springdev.* TO 'springdev'@'%';

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/springdev
spring.datasource.username=springdev
spring.datasource.password=12345

# 개발 환경 설정
spring.devtools.livereload.enabled=true
spring.thymeleaf.cache=false

# JPA 설정
# ddl-auto 옵션 종류
# create : 엔티티로 등록된 클래스와 매핑되는 테이블을 자동으로 생성. 이미 테이블이 존재하고 있으면 기존 테이블을 삭제하고 테이블을 생성.
# create-drop : 애플리케이션이 종료될 때 생성했던 테이블을 삭제.
# update : 이미 테이블이 존재하고 있으면 그대로 두고 변경된 사항(컬럼 등)이 있으면 스키마를 변경, 테이블이 없으면 생성.
# validate : 테이블을 생성하지 않고 엔티티 클래스와 테이블이 정상적으로 매핑되는지만 검사.
# none : 위의 4가지 속성을 제외한 나머지 경우에 해당.
spring.jpa.database=MYSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.show-sql=true

#No serializer error 방지
spring.jackson.serialization.fail-on-empty-beans=false

# 내장 톰캣 설정
tomcat.ajp.protocol=AJP/1.3
tomcat.ajp.port=8009
tomcat.ajp.enabled=true

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

# 로그 기록
logging.file.name=myapp.log
logging.file.max-size=10MB
logging.file.max-history=10

logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.com.myapp=DEBUG